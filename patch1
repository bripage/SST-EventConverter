diff --git a/src/Makefile b/src/Makefile
index 2b1efe5..476cd04 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -10,6 +10,7 @@ endif
 CXX=$(shell sst-config --CXX)
 CXXFLAGS=$(shell sst-config --ELEMENT_CXXFLAGS)
 LDFLAGS=$(shell sst-config --ELEMENT_LDFLAGS)
+ELEMENT_HEADERS=$(shell sst-config SST_ELEMENT_LIBRARY SST_ELEMENT_LIBRARY_HOME)/include
 CPPFLAGS= -I/scratch/shared/apps/sst/13.0.0/elements/include -I./
 OPTIMIZE_FLAGS=-O2
 
@@ -29,7 +30,7 @@ debug: $(COMPONENT_LIB)
 $(COMPONENT_LIB): $(EVENTCONVERTER_OBJS)
 	$(CXX) $(OPTIMIZE_FLAGS) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) -o $@ *.o
 %.o:%.cc $(SIMPLEEXAMPLE_HEADERS)
-	$(CXX) $(OPTIMIZE_FLAGS) $(CXXFLAGS) $(CPPFLAGS) -c $<
+	$(CXX) $(OPTIMIZE_FLAGS) $(CXXFLAGS) $(CPPFLAGS) -I$(ELEMENT_HEADERS) -c $<
 install: $(COMPONENT_LIB)
 	sst-register eventConverter eventConverter_LIBDIR=$(CURDIR)
 clean:
diff --git a/src/eventConverter.h b/src/eventConverter.h
index 49bfe65..b295765 100644
--- a/src/eventConverter.h
+++ b/src/eventConverter.h
@@ -21,7 +21,7 @@ namespace SST {
                     : SubComponent(id) { }
 
             virtual ~baseSubComponent() { }
-            virtual void send(){ };
+            virtual void send(SST::Event *){ };
             void setAdjacentSubComp(baseSubComponent* comp){adjacentSubComp = comp;}
 
             baseSubComponent* adjacentSubComp;
diff --git a/src/memToRtr.cc b/src/memToRtr.cc
index f9de6b9..e879b0c 100644
--- a/src/memToRtr.cc
+++ b/src/memToRtr.cc
@@ -10,7 +10,8 @@ using namespace SST::eventConverter;
 memToRtr::memToRtr(ComponentId_t id, Params& params)
   : baseSubComponent(id, params) {
     out = new Output("", 1, 0, Output::STDOUT);
-    memLink = configureLink("memPort", "1 ps", new Event::Handler<memToRtr>(this, &memToRtr::handleEvent));
+    //memLink = configureLink("memPort", "1 ps", new Event::Handler<memToRtr>(this, &memToRtr::handleEvent));
+    memLink = configureLink("memPort", new Event::Handler<memToRtr>(this, &memToRtr::handleEvent));
 }
 
 // memToRtr destructor
@@ -29,10 +30,9 @@ void memToRtr::send(SST::Event* ev){
 }
 
 // memToRtr event handler
-bool memToRtr::handleEvent(SST::Event* ev){
+void memToRtr::handleEvent(SST::Event* ev){
     SST::MemHierarchy::MemEventBase* mev = dynamic_cast<SST::MemHierarchy::MemEventBase*>(ev);
     adjacentSubComp->send(mev->clone()); // use rtrToMem's send method to hand off the memory event
-    return true;
 }
 
 
diff --git a/src/memToRtr.h b/src/memToRtr.h
index 2e5d218..761c436 100644
--- a/src/memToRtr.h
+++ b/src/memToRtr.h
@@ -37,7 +37,7 @@ class memToRtr : public baseSubComponent {
         memToRtr(ComponentId_t id, Params& params);
         ~memToRtr();
         void send(SST::Event*);
-        bool handleEvent(SST::Event*);
+        void handleEvent(SST::Event*);
 
     private:
         // Params
@@ -45,4 +45,4 @@ class memToRtr : public baseSubComponent {
         SST::Link* memLink;
 };
 
-#endif
\ No newline at end of file
+#endif
